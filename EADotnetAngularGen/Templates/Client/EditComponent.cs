// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace EADotnetAngularGen.Templates.Client
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using CaseExtensions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class EditComponent : EditComponentBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatDialogModule, MatDialogRef } from '@angular/material/dialog';
import { MatFormFieldModule } from '@angular/material/form-field';
import {MatInputModule} from '@angular/material/input';
import {MatGridListModule} from '@angular/material/grid-list';
import {FormGroup, FormControl} from '@angular/forms';
import {Component, Inject, OnInit} from '@angular/core';
import {MAT_DIALOG_DATA} from '@angular/material/dialog';
import { ");
            
            #line 16 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", Model.Attributes.Cast<EA.Attribute>().Where(x=>!x.IsTypePrimitive()).Select(x=>x.Type).Concat(new string[]{Model.Name}).Select(x=> string.Format("{0}, {0}Service, {0}ServiceInterface", x)))));
            
            #line default
            #line hidden
            this.Write(@" } from '../api';
import {MatSlideToggleModule} from '@angular/material/slide-toggle';
import { MatSelectModule } from '@angular/material/select';
import { lastValueFrom } from 'rxjs';
import { HttpErrorResponse } from '@angular/common/http';

@Component({
  selector: 'app-new-page-edit',
  standalone: true,
  imports: [MatButtonModule, MatDialogModule,FormsModule, MatFormFieldModule, MatInputModule, MatGridListModule, ReactiveFormsModule, MatSlideToggleModule, MatSelectModule],
  templateUrl: './");
            
            #line 26 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToKebabCase()));
            
            #line default
            #line hidden
            this.Write("-edit.component.html\',\r\n  styleUrl: \'./");
            
            #line 27 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToKebabCase()));
            
            #line default
            #line hidden
            this.Write("-edit.component.scss\'\r\n})\r\nexport class ");
            
            #line 29 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("EditComponent implements OnInit{\r\n\r\n");
            
            #line 31 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
 foreach (var attr in Model.Attributes.Cast<EA.Attribute>().Where(x=>!x.IsTypePrimitive())) { 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 32 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Name.ToCamelCase().Pluralize()));
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 32 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Type));
            
            #line default
            #line hidden
            this.Write("[] = [];\r\n\r\n");
            
            #line 34 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n  errors: string[] = [];\r\n\r\n  editForm = new FormGroup({\r\n");
            
            #line 39 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
 

var defaultValues = new Dictionary<string, string>(){
  {"int", "0"},
  {"String", "\"\""},
  {"Decimal", "0"},
  {"DateTime", "Date.now()"},
  {"Boolean", "false"}
};

foreach (EA.Attribute attr in Model.Attributes) { 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 50 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
 if(defaultValues.ContainsKey(attr.Type)) { 
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 51 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Name.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write(": new FormControl(");
            
            #line 51 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(defaultValues[attr.Type]));
            
            #line default
            #line hidden
            this.Write("),\r\n    ");
            
            #line 52 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
 } else {  
            
            #line default
            #line hidden
            this.Write("        ");
            
            #line 53 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Name.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("Id: new FormControl(0),\r\n    ");
            
            #line 54 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
 } 
            
            #line default
            #line hidden
            
            #line 55 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    \r\n  });\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public data: number | null," +
                    " public dialogRef: MatDialogRef<");
            
            #line 58 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("EditComponent>, ");
            
            #line 58 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", Model.Attributes.Cast<EA.Attribute>().Where(x=>!x.IsTypePrimitive()).Select(x=>x.Type).Concat(new string[]{Model.Name}).Select(x=> string.Format("@Inject({1}Service) private {0}Service: {1}ServiceInterface", x.ToCamelCase(), x)))));
            
            #line default
            #line hidden
            this.Write(") { \r\n\r\n  }\r\n\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    \r\n");
            
            #line 65 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
 foreach (var attr in Model.Attributes.Cast<EA.Attribute>().Where(x=>!x.IsTypePrimitive())) { 
            
            #line default
            #line hidden
            this.Write("    this.");
            
            #line 66 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Name.ToCamelCase().Pluralize()));
            
            #line default
            #line hidden
            this.Write(" = await lastValueFrom(this.");
            
            #line 66 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Name.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("Service.");
            
            #line 66 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attr.Name.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("Get());\r\n");
            
            #line 67 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    \r\n    if(this.data!==null){\r\n      const detail = await lastValueFrom(this.");
            
            #line 70 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("Service.");
            
            #line 70 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("IdGet(this.data));\r\n      this.editForm.patchValue(detail);\r\n    }\r\n  }\r\n\r\n\r\n  as" +
                    "ync ok(){\r\n   try{\r\n    \r\n    if(this.data===null){\r\n      await lastValueFrom(t" +
                    "his.");
            
            #line 80 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("Service.");
            
            #line 80 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("Post(this.editForm.value as ");
            
            #line 80 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("));\r\n    } else {\r\n      await lastValueFrom(this.");
            
            #line 82 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("Service.");
            
            #line 82 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToCamelCase()));
            
            #line default
            #line hidden
            this.Write("Put(this.editForm.value as ");
            
            #line 82 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(@"));
    }
    
    this.dialogRef.close(this.editForm.value);
   } catch(error: unknown){
    const e = error as HttpErrorResponse;
    if(e.status===400){
      this.errors = Object.keys(e.error.errors).map(key=>e.error.errors[key][0] as string);
    
    }
     
   }
    
    
  }

}


");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 101 "C:\Users\David\source\repos\EA-dotnet-angular-gen\EADotnetAngularGen\Templates\Client\EditComponent.tt"


public EA.Element Model { get; set; }


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class EditComponentBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
